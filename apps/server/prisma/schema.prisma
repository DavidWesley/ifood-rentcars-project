// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "schema.dbml"
}

model VehicleType {
  type        String    @id @unique
  description String?
  tax         Float     @default(1.0)
  Vehicle     Vehicle[]

  @@map("vehicle_types")
}

model LicenseType {
  type        String     @id @unique
  description String?
  Customer    Customer[]

  @@map("license_types")
}

model Vehicle {
  id                String @id @default(uuid())
  plate             String @unique
  model             String
  brand             String
  manufacturingYear Int    @map(name: "manufacturing_year")
  color             String
  type              String

  hourlyRentalRate Float    @map(name: "hourly_rental_rete")
  available        Boolean  @default(true)
  Rental           Rental[]
  popularity       Int

  VehicleType VehicleType @relation(fields: [type], references: [type])

  @@map("vehicles")
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updateAt  DateTime @updatedAt @map(name: "updated_at")

  name      String
  email     String   @unique
  cpf       String   @unique
  birthDate DateTime
  gender    String
  license   String
  points    Int
  Rental    Rental[]

  licenseType LicenseType @relation(fields: [license], references: [type])

  @@map("customers")
}

model Rental {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updateAt  DateTime @updatedAt @map(name: "updated_at")

  startDate DateTime
  endDate   DateTime
  amount    Float
  state     String   @default("active")

  customerId String
  vehicleId  String
  invoiceId  String?

  Customer Customer @relation(fields: [customerId], references: [id])
  Vehicle  Vehicle  @relation(fields: [vehicleId], references: [id])
  Invoice  Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("rentals")
}

model Invoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updateAt  DateTime @updatedAt @map(name: "updated_at")

  customerId String    @unique
  state      String    @default("open")
  rentals    Rental[]
  services   Service[]

  @@map("invoices")
}

model Service {
  id          String @id @default(uuid())
  description String
  cost        Float

  invoiceId String?
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("services")
}
